初始化版本库：
	- git init

添加文件到版本库：
	- git add mmm.s //mmm表示的是文件的名称 s表示的是文件的后缀名
	- git commit -m "提交的描述"
	- git log // 用于查看提交日志
	- git checkout -- // 下载本地仓库以前代码！
	- git reset HEAD <file名字>
		    --hard 提交号   意思是暂存区和服务器全部回滚到版本号所表示的版本
	- git rm 文件名  会将本地的文件删除，并且提交到暂存区删除，执行提交操作之后，删除成功。

	// 查看仓库状态
	- git status
【ssh -key配置】
	- ssh-keygen -t rsa -C "1054656114@qq.com"    用来创建SSH 秘钥的命令，为了和远程的github相关联起来。

	- ssh -T git@github.com  为了测试是否和github连接成功
	  //  在使用commit 提交之后
	  //  与远程的仓库关联起来
	- git remote add origin https://github.com/bruin-sxk/bruin_frist.git
	// 拉取github上的仓库
	- git pull origin master --allow-unrelated-histories
	// 更新github上的仓库
	- git push -u origin master

	// XXX表示的是github的用户名，yyy为仓库名
	- git clone git@github.com:XXX/yyy.git    
【配置账户】
	- git config --global user.name "你的用户名" #设置用户名
	- git config --global user.email "email" #设置邮箱地址（建议使用github的邮箱）
【用git创建仓库】
	- mkdir nnn // 仓库名称
	- cd nnn
	- git init // 可以选择加 --bare 参数	
	- touch README.md // 创建文件
	- git add README.md   // 将文件上传在暂存区
	- git commit -m "hhh" // hh 表示的是提交的描述信息    更详细的信息不要添加-m
	- git log --pretty=short  // 加--pertty=short只显示提交信息的第一行
	- git log -p 文件名  //查看提交所带来的改动
	- git diff // 可以查看工作树，暂存区，最新提交之间的差别
	- git diff HEAD  //  查看工作树最新提交的差别
【分支操作】
	- git branch //显示分支一览表，同时确认当前所在的分支
	- git checkout -b aaa //创建名为aaa的分支，并且切换到aaa分支
　　	（git branch aaa //创建名为aaa的分支
　　	  git checkout aaa // 切换到aaa分支
　　	 ）能和git branch -b aaa 得到同样的效果 
	- git checkout - //切换到上一分支 
【合并分支】
	- git checkout master //切换到master分支
	- git marge --no--ff aaa // 加--no--ff 参数可以在历史记录中明确地记录本次分支的合并
	- git log --graph //以图表形式查看分支
【更改提交的操作】
	- git reset // 回溯历史版本
	- git reset --hard 提交号  // 回溯到指定的时间 
【推进历史】
	- git reflog //查看仓库的操作日志，找到要推历史的哈希值
	- git checkout master
	- git reset --hrad ddd //ddd为要推进历史的提交版本号
【修改提交信息】
	- git commit --amend　　压缩历史 git rebase -i 错字漏字等失误称作typo　　根据以前的步骤在GitHub上创建仓库，应于本地的仓库名相同 GitHub上面创建的仓库的路径为git@github.com: 用户名/仓库名.git
	- git remote add eee git@github.com: 用户名/仓库名.git //添加远程仓库，并将git@github.com: 用户名/仓库名.git远程仓库的名称改为eee
	- git push -u eee master //推送至远程仓库 master分支下 -u 参数可以在推送的同时，将eee仓库的master分支设置为本地仓库的当前分支的的upstream（上游）。添加这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从eee的master分支中获取内容　　
	- git checkout -b feature d eee/feature d //获取远程的feature d分支到本地仓库，-b参数后面是本地仓库中新建的仓库的名称　　
	- git pull eee feature d //将本地的feature d分支更新为最新状态　　

在GitHub上面查看两个分支之间的差别，只需要在地址栏中输入http://github.com/用户名/仓库名/分支1...分支2　　

【查看master分支在最近七天内的差别】
http://github.com/用户名/仓库名/master@{7.day.ago}...master （同样，day，week，month，year都是可以哒）　　
【查看与指定日期之间的差别】
	http://github.com/用户名/仓库名/master@{xxxx-xx-xx}...master （xxxx-xx-xx代表年月日）


GUI图形化界面中的按钮标识：
	
rescan:刷新列表
stage changed：改变状态
sign off：检查完成
commite：提交到缓冲区
push：上传到服务器